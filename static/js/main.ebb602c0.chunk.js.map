{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","none","sortMethod","setSortMethod","isReversed","setOrder","visibleGoods","goodsArr","sortBy","preparedGoods","sort","good1","good2","sortByABC","localeCompare","sortByLength","length","reverse","sorting","className","type","classNames","onClick","sortingMethod","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,QAAAA,E,gBAAAA,E,uBAAAA,M,KAML,IAyBaE,EAAM,WACjB,MAAoCC,mBAASH,EAASI,MAAtD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA+BH,oBAAS,GAAxC,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EA7BQ,SAACC,EAAoBC,EAAkBJ,GACrD,IAAMK,EAAa,YAAOF,GAqB1B,OAnBIC,GACFC,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQJ,GACN,KAAKX,EAASgB,UACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKf,EAASkB,aACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXZ,GACFK,EAAcQ,UAGTR,EAOcS,CAAQpB,EAAiBI,EAAYE,GAa1D,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,SAAU,UAAW,CACzC,WAAYnB,IAAeL,EAASgB,YAEtCS,QAAS,kBAAMnB,EAAcN,EAASgB,YALxC,iCAUA,wBACEO,KAAK,SACLD,UAAWE,IAAW,SAAU,aAAc,CAC5C,WAAYnB,IAAeL,EAASkB,eAEtCO,QAAS,kBA7BUC,EA6Bc1B,EAASkB,kBA5BhDZ,EAAcoB,GADU,IAACA,GAwBrB,4BAUA,wBACEH,KAAK,SACLD,UAAWE,IAAW,SAAU,aAAc,CAC5C,YAA2B,IAAfjB,IAEdkB,QAAS,kBAnCUjB,GAAUD,IA8B/B,sBAUEA,GAAcF,IACd,wBACEkB,KAAK,SACLD,UAAU,4BACVG,QAAS,kBAzCjBnB,EAAcN,EAASI,WACvBI,GAAS,IAqCH,sBAUJ,6BACGC,EAAakB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YC7GlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ebb602c0.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  none = '',\n  sortByABC = 'abc',\n  sortByLength = 'length',\n}\n\nconst sorting = (goodsArr: string[], sortBy: SortType, isReversed: boolean) => {\n  const preparedGoods = [...goodsArr];\n\n  if (sortBy) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortBy) {\n        case SortType.sortByABC:\n          return good1.localeCompare(good2);\n\n        case SortType.sortByLength:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n};\n\nexport const App = () => {\n  const [sortMethod, setSortMethod] = useState(SortType.none);\n  const [isReversed, setOrder] = useState(false);\n\n  const visibleGoods = sorting(goodsFromServer, sortMethod, isReversed);\n\n  const makeSetSortMethod = (sortingMethod: SortType) => {\n    setSortMethod(sortingMethod);\n  };\n\n  const makeSetOrder = () => setOrder(!isReversed);\n\n  const makeReset = () => {\n    setSortMethod(SortType.none);\n    setOrder(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-info', {\n            'is-light': sortMethod !== SortType.sortByABC,\n          })}\n          onClick={() => setSortMethod(SortType.sortByABC)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-success', {\n            'is-light': sortMethod !== SortType.sortByLength,\n          })}\n          onClick={() => makeSetSortMethod(SortType.sortByLength)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-warning', {\n            'is-light': isReversed === false,\n          })}\n          onClick={() => makeSetOrder()}\n        >\n          Reverse\n        </button>\n\n        {(isReversed || sortMethod) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => makeReset()}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}